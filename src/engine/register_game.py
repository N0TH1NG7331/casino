import json
import requests

from .engine import Engine, transform_emoji_name_to_textRU, transform_bet, transform_text_to_emoji
from utils.database import DataBase, UserType
from configs import BOT as bot, CRYPTOPAY as cryptopay, CHANNAL_ID, ADMIN_IDS, TON_USDT, USDT_RUB
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from asyncio import sleep
from handlers.start import keyboard as start_keyboard

def keyboard_to_pay(link):
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=link))
    
    return markup

async def generate_payment(message, data, bet: float, coin: str) -> bool:
    database = DataBase()
    database.open()
    database.execute(f"""UPDATE users SET pay_wait_count = 0 AND pay_count = '{str(bet)}' WHERE user_id = {message.from_user.id}""")
    database.commit()
    database.close()
    emoji_name = transform_emoji_name_to_textRU(data[UserType.game])
    coin = coin.upper()
    
    print(f"[DEBUG] User ({message.from_user.id} | {message.from_user.first_name}) created check({bet} | {coin}) waiting to pay...")
    pay_check = cryptopay.createInvoice(coin, str(bet), {"expires_in": 300})
    
    msg = await bot.send_message(message.from_user.id, f"""
üßæ <b>–ß–µ–∫: </b>
üÜî <b>ID:</b> <code>{pay_check['result']['invoice_id']}</code>
üïπ <b>–ò–≥—Ä–∞:</b> <code>{emoji_name}</code>
üíµ <b>–°—É–º–º–∞:</b> <code>{str(bet)} {coin}</code>
üîó <b>–°—Å—ã–ª–∫–∞:</b> {pay_check['result']['bot_invoice_url'].split("https://")[1]}
‚è≥ <b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> <code>5 –º–∏–Ω—É—Ç</code>

üìç –°—Ç–∞—Ç—É—Å: <code>–û–∂–∏–¥–∞–µ–º –æ–ø–ª–∞—Ç—ã</code>
""", reply_markup=keyboard_to_pay(pay_check['result']['bot_invoice_url'].split("https://")[1]))
    
    check = cryptopay.getInvoice(coin, pay_check['result']['invoice_id'])
    while check['result']['items'][0]['status'] != "paid":
        if check['result']['items'][0]['status'] == "expired":
            await bot.edit_message_text(f"""üßæ <b>–ß–µ–∫: </b>
üÜî <b>ID:</b> <code>{pay_check['result']['invoice_id']}</code>
üïπ <b>–ò–≥—Ä–∞:</b> <code>{emoji_name}</code>
üíµ <b>–°—É–º–º–∞:</b> <code>{str(bet)} {coin}</code>
üîó <b>–°—Å—ã–ª–∫–∞:</b> {pay_check['result']['bot_invoice_url'].split("https://")[1]}
‚è≥ <b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> <code>5 –º–∏–Ω—É—Ç</code>

üìç –°—Ç–∞—Ç—É—Å: <code>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ</code>
""", message.chat.id, msg.id)
            database.reset_pay(message.from_user.id)
            return False
            break
        
        check = cryptopay.getInvoice(coin, pay_check['result']['invoice_id'])
        await sleep(1)
        
    await bot.edit_message_text(f"""
üßæ <b>–ß–µ–∫: </b>
üÜî <b>ID:</b> <code>{pay_check['result']['invoice_id']}</code>
üïπ <b>–ò–≥—Ä–∞:</b> <code>{emoji_name}</code>
üíµ <b>–°—É–º–º–∞:</b> <code>{str(bet)} {coin}</code>
üîó <b>–°—Å—ã–ª–∫–∞:</b> {pay_check['result']['bot_invoice_url'].split("https://")[1]}
‚è≥ <b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> <code>5 –º–∏–Ω—É—Ç</code>

üìç –°—Ç–∞—Ç—É—Å: <code>–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞</code>
""", message.chat.id, msg.id)

    print(f"[DEBUG] Succes pay: {pay_check['result']['invoice_id']} owner: {message.from_user.id} | {message.from_user.first_name}")
    
    return True
    

def calc_win(engine: Engine, bet_name: str, emoji_name: str):
    match emoji_name:
        case '–ö–æ—Å—Ç–∏':
            engine.get_win_cube(bet_name)
        case '–ë–∞—Å–∫–µ—Ç–±–æ–ª':
            engine.get_win_basketball(bet_name)
        case '–§—É—Ç–±–æ–ª':
            engine.get_win_football(bet_name)
        case '–î–∞—Ä—Ç—Å':
            engine.get_win_darts(bet_name)
        case '–°–ª–æ—Ç—ã':
            engine.get_win_casino(bet_name)

async def handler(message, bet: float, coin: str):
    database = DataBase()
    database.open()
    data = database.find_user_by_id(message.from_user.id)
    database.close()
    
    success_pay = await generate_payment(message, data, bet, coin)
    
    if success_pay == False:
        return
    
    emoji_name = transform_emoji_name_to_textRU(data[UserType.game])
    bet_name = transform_bet(data[UserType.game_bet_to_win])    
    
    await bot.send_message(message.from_user.id, "<i>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã –Ω–∞ @MaxBetCasino_tg!</i>", reply_markup=start_keyboard())
    
    
    me = await bot.get_me()
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("üïπ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{me.username}?start=0"))

#     ‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!
# ‚ö°Ô∏è –û—Ç: —Ö—É–π
# üéÆ  –ò–≥—Ä–∞: –ø–∏–¥—Ä 
# üì§ –ò—Å—Ö–æ–¥: —Ö—É–π
# üí∏ –°—Ç–∞–≤–∫–∞: –ø–∏–∑–¥–∞

#<b><i></i></b>
    
    await bot.send_message(CHANNAL_ID, f"""
<b>‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!</b>
‚ö°Ô∏è <b>–û—Ç:</b> <b><i>{(message.from_user.first_name)}</i></b>
üéÆ <b>–ò–≥—Ä–∞:</b> <b><i>{(emoji_name)}</i></b>
üì§ <b>–ò—Å—Ö–æ–¥:</b> <b><i>{(transform_bet(data[UserType.game_bet_to_win])[0].upper() + transform_bet(data[UserType.game_bet_to_win])[1:len(transform_bet(data[UserType.game_bet_to_win]))])}</i></b>
üí∏ <b>–°—Ç–∞–≤–∫–∞:</b> <b><i>{(bet)} {coin.upper()}</i></b>""", reply_markup=markup)
    
    engine = Engine(bot, message, CHANNAL_ID, transform_text_to_emoji(data[UserType.game]))
    
    if engine.is_duel(bet_name):
        await engine.send_palyer_dice()
        await engine.send_dealer_dice()
    else:
        await engine.send_palyer_dice()

    await sleep(4)
    
    # –õ–û–õ –ò–î–ò –ù–ê–•Y
    calc_win(engine, bet_name, emoji_name)
    
    if engine.draw == True:
        await bot.reply_to(engine.player_dice, "<b>–ù–∏—á—å—è! –ü–µ—Ä–µ–±—Ä–æ—Å!</b> ‚ôªÔ∏è")
 
        if engine.draw == True:
            while True:
                if engine.draw == False:
                    break
                
                await engine.send_palyer_dice()
                await engine.send_dealer_dice()
                await sleep(4)

                calc_win(engine, bet_name, emoji_name)
                
    
    if engine.draw == True:
        await bot.reply_to(engine.player_dice, "<b>–ù–∏—á—å—è! –ü–µ—Ä–µ–±—Ä–æ—Å!</b> ‚ôªÔ∏è")

        while engine.draw == True:
            await engine.send_palyer_dice()
            await engine.send_dealer_dice()
            await sleep(4)

            calc_win(engine, bet_name, emoji_name)

            if engine.draw == False:
                break
            
    if engine.win == True:
        if coin.lower() == "ton":
            money = round(float((bet * TON_USDT) * engine.multi), 3)
        else:
            money = round(float(bet * engine.multi), 3)
        check = cryptopay.createCheck("USDT", str(money), {"pin_to_user_id": message.from_user.id})
        
        if check['ok'] == False:
            if check['error']['name'] == "NOT_ENOUGH_COINS":
                balance = cryptopay.getBalance()
                for admin_id in ADMIN_IDS:
                    await bot.send_message(admin_id, f"""
‚ùóÔ∏è <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞—Ç—å —á–µ–∫ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã</b> ‚ùóÔ∏è
üë§ <b>–ò–≥—Ä–æ–∫:</b> <code>{message.from_user.id}</code> {f'<code>{message.from_user.first_name}</code>' if not message.from_user.username else '@' + message.from_user.username}
üí∞ <b>–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞:</b> <code>{money}</code>
üí∏ <b>–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å</b> <code>{balance["result"][0]["available"]} USDT | {balance["result"][1]["available"]} TON</code>üí≤
""")
                await bot.reply_to(engine.player_dice, "–û—à–∏–±–∫–∞, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
                database.open()
                database.reset_pay(message.from_user.id)
                database.close()
                return
            else:
                await bot.reply_to(engine.player_dice, "–û—à–∏–±–∫–∞ " + check['error']['name'])
                database.open()
                database.reset_pay(message.from_user.id)
                database.close()
                return
            
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üéÅ –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à", url=check['result']['bot_check_url']))
        with open("data/assets/victory_image.jpg", "rb") as photo:
            await bot.send_photo(CHANNAL_ID, photo,
                f"""üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏! {money}$ ({round(float(money * USDT_RUB), 2)}‚ÇΩ)</b>
<blockquote>–î–µ–ª–∞–π —Å—Ç–∞–≤–∫—É –µ—â—ë —Ä–∞–∑! –ö—Ç–æ –∑–Ω–∞–µ—Ç –Ω–∞ —á—å–µ–π —Å—Ç–æ—Ä–æ–Ω–µ –±—É–¥–µ—Ç —É–¥–∞—á–∞ –≤ —ç—Ç–æ—Ç —Ä–∞–∑!</blockquote>""",
                                 reply_to_message_id=engine.player_dice.id)
        # await bot.reply_to(engine.player_dice,
        #                    f"<b>–ü–æ–±–µ–¥–∞!</b>\n<blockquote>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏: {str(money)}! –ò—Å–ø—ã—Ç–∞–π —É–¥–∞—á—É –µ—â—ë —Ä–∞–∑!</blockquote>", reply_markup=markup)
        
        database.open()
        database.reset_pay(message.from_user.id)
        database.execute(f"""UPDATE users SET victories = victories + 1 WHERE user_id = {message.from_user.id}""")
        database.commit()
        database.close()
    else:
        markup = InlineKeyboardMarkup()
        markup.row(InlineKeyboardButton("üïπ –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É", url=f"https://t.me/{me.username}?start=0"))
        with open("data/assets/lose_image.jpg", "rb") as photo:
            request = requests.get("https://api.forismatic.com/api/1.0/?method=getQuote&format=jsonp&jsonp=?&lang=ru")
            json_data = json.loads(request.text[2:len(request.text) - 1])
            await bot.send_photo(CHANNAL_ID, photo, f"""
<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!</b> üòû
<blockquote>{json_data['quoteText']}</blockquote>
            """)
        # await bot.reply_to(engine.player_dice,
        #                    "<b>–ü—Ä–æ–∏–≥—Ä—ã—à!</b>\n<blockquote>–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Ç–µ–±–µ —Ç–æ—á–Ω–æ –ø–æ–≤–µ–∑–µ—Ç!</blockquote>", reply_markup=markup)
        database.open()
        database.reset_pay(message.from_user.id)
        database.execute(f"""UPDATE users SET losses = losses + 1 WHERE user_id = {message.from_user.id}""")
        database.commit()
        database.close()